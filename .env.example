# =============================================================================
# OST DATA ENGINE - ENVIRONMENT CONFIGURATION
# =============================================================================
# 
# This file contains all environment variables needed to run the OST Data Engine.
# Copy this file to .env and update the values for your environment.
#
# Architecture: GitHub Data → ML Pipeline → PostgreSQL → Go API → Recommendations
# =============================================================================

# =============================================================================
# DATABASE CONFIGURATION
# =============================================================================
# PostgreSQL database settings with pgvector extension for vector operations
# =============================================================================

DATABASE_URL=postgresql://user:password@localhost:5434/DB_NAME
POSTGRES_USER=user
POSTGRES_PASSWORD=password
POSTGRES_DB=DB_NAME
POSTGRES_HOST=localhost
POSTGRES_PORT=5434

# =============================================================================
# DBT CONFIGURATION
# =============================================================================
# Data transformation and modeling settings
# =============================================================================

DB_SCHEMA=public
DB_THREADS=4
REDIS_PORT=6379
DBT_PROJECT_DIR=src/dbt

# =============================================================================
# API KEYS & EXTERNAL SERVICES
# =============================================================================
# Authentication tokens for external APIs
# =============================================================================

GITHUB_ACCESS_TOKEN=your_github_access_token_here

# =============================================================================
# APPLICATION CONFIGURATION
# =============================================================================
# Core application settings and behavior
# =============================================================================

LOG_LEVEL=INFO
ENVIRONMENT=development
PROJECT_ROOT=/path/to/your/project

# =============================================================================
# MACHINE LEARNING MODEL CONFIGURATION
# =============================================================================
# Settings for embedding models and ML pipeline
# =============================================================================

MODEL_DIR=models/
MODEL_NAME=sentence-transformers/all-MiniLM-L6-v2
MODEL_DISPLAY_NAME=all-MiniLM-L6-v2
MODEL_DIMENSIONS=384

# =============================================================================
# GO API CONFIGURATION
# =============================================================================
# High-performance recommendation API settings
# =============================================================================

GO_API_PORT=8080

# =============================================================================
# SECURITY CONFIGURATION
# =============================================================================
# Security and access control settings
# =============================================================================

SECRET_KEY=your_secret_key_here
ALLOWED_HOSTS=localhost,127.0.0.1

# =============================================================================
# MONITORING & OBSERVABILITY
# =============================================================================
# Metrics, logging, and monitoring settings
# =============================================================================

ENABLE_METRICS=true
METRICS_PORT=9090

# =============================================================================
# REDIS CACHE CONFIGURATION
# =============================================================================
# Cache settings for ML pipeline embeddings optimization
# =============================================================================

REDIS_CACHE_URL=redis://localhost:6379/0
REDIS_CACHE_TTL=86400

# =============================================================================
# GITHUB DATA SCRAPING CONFIGURATION
# =============================================================================
# Settings for collecting repository data from GitHub
# =============================================================================

GITHUB_SCRAPING_QUERY="language:python stars:>100 language:javascript stars:>100 language:go stars:>100 language:java stars:>100 language:rust stars:>100 language:typescript stars:>100"
GITHUB_MAX_REPOSITORIES=500
GITHUB_MIN_STARS=100
GITHUB_LANGUAGES=python,javascript,go,java,rust,typescript

# =============================================================================
# DAGSTER PIPELINE CONFIGURATION
# =============================================================================
# Data orchestration and workflow management
# =============================================================================

DAGSTER_HOME=./logs/dagster

# =============================================================================
# MLFLOW MODEL MANAGEMENT
# =============================================================================
# Model versioning, tracking, and experiment management
# =============================================================================

MLFLOW_TRACKING_URI=sqlite:///logs/mlflow.db
MLFLOW_ARTIFACT_ROOT=models/mlruns
MLFLOW_MODEL_REGISTRY_NAME=ost-models
MLFLOW_UI_PORT=5050
MLFLOW_UI_HOST=0.0.0.0

# =============================================================================
# RECOMMENDATION ENGINE PARAMETERS
# =============================================================================
# Fine-tune the recommendation algorithm behavior
# =============================================================================

# Similarity calculation weights (must sum to 1.0)
RECOMMENDATION_SEMANTIC_WEIGHT=0.4      # Weight for semantic similarity
RECOMMENDATION_CATEGORY_WEIGHT=0.3      # Weight for category overlap
RECOMMENDATION_TECH_WEIGHT=0.2          # Weight for tech stack overlap
RECOMMENDATION_POPULARITY_WEIGHT=0.1    # Weight for project popularity

# Recommendation output settings
RECOMMENDATION_TOP_N=5                  # Number of recommendations per user
RECOMMENDATION_MIN_SIMILARITY=0.1       # Minimum similarity threshold
RECOMMENDATION_MAX_PROJECTS=50          # Max projects to consider per user
RECOMMENDATION_POPULARITY_THRESHOLD=100000  # Popularity normalization threshold

# =============================================================================
# CONFIGURATION COMPLETE!
# =============================================================================
# 
# Next steps:
# 1. Update the values above for your environment
# 2. Run: docker-compose up -d db
# 3. Run: dagster asset materialize --select user_project_similarities
# 4. Run: docker-compose up go-api
# 5. Test: curl http://localhost:8080/health
#
# For more information, see: docs/deployment/quick-start.md
# =============================================================================