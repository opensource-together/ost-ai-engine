# Define custom networks for better isolation
networks:
  ost_backend:
    driver: bridge
  ost_database:
    driver: bridge

services:
  # Go API Service
  go-api:
    build: 
      context: ./src/api/go
      dockerfile: Dockerfile
    container_name: ost_go_api
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}?sslmode=disable
      - GITHUB_ACCESS_TOKEN=${GITHUB_ACCESS_TOKEN}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    ports:
      - "${GO_API_PORT:-8080}:8080"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - ost_backend
      - ost_database
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Database Service
  db:
    image: pgvector/pgvector:pg15
    container_name: ost_db
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    ports:
      - "${DB_PORT:-5434}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/database:/docker-entrypoint-initdb.d:ro
    networks:
      - ost_database
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d ost_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true

  # Redis Cache Service
  redis:
    image: redis:7-alpine
    container_name: ost_redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - ost_backend
      - ost_database
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local 