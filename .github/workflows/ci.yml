name: CI Pipeline

on:
  push:
    branches: [ "main", "spidey/**" ]
  pull_request:
    branches: [ "main" ]

# Global environment variables
env:
  PYTHON_VERSION: "3.13"
  POETRY_VERSION: "1.7.1"

jobs:
  # ============================================================================
  # SETUP & DEPENDENCY VALIDATION
  # ============================================================================
  setup:
    name: "üîß Setup & Dependencies"
    runs-on: ubuntu-latest
    outputs:
      python-version: ${{ steps.setup-info.outputs.python-version }}
      poetry-cache-key: ${{ steps.setup-info.outputs.poetry-cache-key }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install Poetry
      run: pipx install poetry==${{ env.POETRY_VERSION }}
      
    - name: Configure Poetry
      run: |
        poetry config virtualenvs.create true
        poetry config virtualenvs.in-project true
        
    - name: Cache Poetry dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-
          
    - name: Install dependencies
      run: poetry install --no-interaction --no-ansi
      
    - name: Verify installation
      run: |
        poetry run python --version
        poetry run pip list
        
    - name: Output setup info
      id: setup-info
      run: |
        echo "python-version=${{ env.PYTHON_VERSION }}" >> $GITHUB_OUTPUT
        echo "poetry-cache-key=venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}" >> $GITHUB_OUTPUT

  # ============================================================================
  # CODE QUALITY & LINTING
  # ============================================================================
  lint:
    name: "üîç Code Quality & Linting"
    runs-on: ubuntu-latest
    needs: setup
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ needs.setup.outputs.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ needs.setup.outputs.python-version }}
        
    - name: Install Poetry
      run: pipx install poetry==${{ env.POETRY_VERSION }}
      
    - name: Restore Poetry cache
      uses: actions/cache@v3
      with:
        path: .venv
        key: ${{ needs.setup.outputs.poetry-cache-key }}
        
    - name: Install dependencies
      run: poetry install --no-interaction --no-ansi
      
    - name: Run Ruff linting
      run: poetry run ruff check . --output-format=github
      
    - name: Run Black formatting check
      run: poetry run black --check --diff .
      
    - name: Check import sorting
      run: poetry run ruff check . --select I --diff

  # ============================================================================
  # SECURITY & DEPENDENCY SCANNING
  # ============================================================================
  security:
    name: "üîí Security & Dependency Scanning"
    runs-on: ubuntu-latest
    needs: setup
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ needs.setup.outputs.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ needs.setup.outputs.python-version }}
        
    - name: Install Poetry
      run: pipx install poetry==${{ env.POETRY_VERSION }}
      
    - name: Restore Poetry cache
      uses: actions/cache@v3
      with:
        path: .venv
        key: ${{ needs.setup.outputs.poetry-cache-key }}
        
    - name: Install dependencies
      run: poetry install --no-interaction --no-ansi
      
    - name: Check for known security vulnerabilities
      run: poetry run safety check --json || true
      
    - name: Poetry dependency audit
      run: poetry audit || true

  # ============================================================================
  # UNIT & INTEGRATION TESTS
  # ============================================================================
  test:
    name: "üß™ Tests (Unit & Integration)"
    runs-on: ubuntu-latest
    needs: [setup, lint]
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ needs.setup.outputs.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ needs.setup.outputs.python-version }}
        
    - name: Install Poetry
      run: pipx install poetry==${{ env.POETRY_VERSION }}
      
    - name: Restore Poetry cache
      uses: actions/cache@v3
      with:
        path: .venv
        key: ${{ needs.setup.outputs.poetry-cache-key }}
        
    - name: Install dependencies
      run: poetry install --no-interaction --no-ansi
      
    - name: Wait for services
      run: |
        timeout 30 bash -c 'until pg_isready -h localhost -p 5432; do sleep 1; done'
        timeout 30 bash -c 'until redis-cli -h localhost -p 6379 ping; do sleep 1; done'
        
    - name: Setup test database
      run: poetry run python scripts/populate_db.py
      env:
        DATABASE_URL: "postgresql://test_user:test_password@localhost:5432/test_db"
        
    - name: Run tests with coverage
      env:
        DATABASE_URL: "postgresql://test_user:test_password@localhost:5432/test_db"
        CELERY_BROKER_URL: "redis://localhost:6379/0"
        CELERY_RESULT_BACKEND: "redis://localhost:6379/0"
        GITHUB_ACCESS_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITHUB_REPO_LIST: ""
        LOG_LEVEL: "DEBUG"
      run: |
        poetry run pytest \
          --cov=src \
          --cov-report=xml \
          --cov-report=html \
          --cov-report=term-missing \
          --junit-xml=test-results.xml \
          -v
          
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: |
          test-results.xml
          htmlcov/
          
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: success()
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # ============================================================================
  # API CONTRACT & DOCUMENTATION VALIDATION
  # ============================================================================
  api-validation:
    name: "üìã API Contract Validation"
    runs-on: ubuntu-latest
    needs: [setup, test]
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ needs.setup.outputs.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ needs.setup.outputs.python-version }}
        
    - name: Install Poetry
      run: pipx install poetry==${{ env.POETRY_VERSION }}
      
    - name: Restore Poetry cache
      uses: actions/cache@v3
      with:
        path: .venv
        key: ${{ needs.setup.outputs.poetry-cache-key }}
        
    - name: Install dependencies
      run: poetry install --no-interaction --no-ansi
      
    - name: Setup test database
      run: poetry run python scripts/populate_db.py
      env:
        DATABASE_URL: "postgresql://test_user:test_password@localhost:5432/test_db"
        
    - name: Start API server for validation
      run: |
        poetry run python -c "
        import sys
        sys.path.append('.')
        from src.api.main import app
        import uvicorn
        uvicorn.run(app, host='127.0.0.1', port=8000)
        " &
        sleep 10
      env:
        DATABASE_URL: "postgresql://test_user:test_password@localhost:5432/test_db"
        
    - name: Validate API endpoints
      run: |
        # Health check
        curl -f http://localhost:8000/health
        
        # OpenAPI schema validation
        curl -f http://localhost:8000/openapi.json > openapi.json
        
        # Test recommendation endpoint (should return 404 for non-existent user)
        curl -f -X GET "http://localhost:8000/recommendations/00000000-0000-0000-0000-000000000000" || echo "Expected 404 for non-existent user"
        
    - name: Upload OpenAPI schema
      uses: actions/upload-artifact@v3
      with:
        name: openapi-schema
        path: openapi.json

  # ============================================================================
  # DOCKER BUILD & VALIDATION
  # ============================================================================
  build:
    name: "üèóÔ∏è Docker Build & Validation"
    runs-on: ubuntu-latest
    needs: [test, security, api-validation]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Build Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./Dockerfile
        push: false
        tags: data-engine:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Test Docker image
      run: |
        docker run --rm -d \
          --name test-container \
          -p 8000:8000 \
          -e DATABASE_URL="sqlite:///./test.db" \
          data-engine:${{ github.sha }}
        
        # Wait for container to start
        sleep 10
        
        # Test health endpoint
        curl -f http://localhost:8000/health
        
        # Stop container
        docker stop test-container

  # ============================================================================
  # FINAL VALIDATION & SUMMARY
  # ============================================================================
  ci-success:
    name: "‚úÖ CI Pipeline Success"
    runs-on: ubuntu-latest
    needs: [setup, lint, security, test, api-validation, build]
    if: success()
    steps:
    - name: Summary
      run: |
        echo "üéâ All CI checks passed successfully!"
        echo "‚úÖ Setup & Dependencies"
        echo "‚úÖ Code Quality & Linting"
        echo "‚úÖ Security & Dependency Scanning"
        echo "‚úÖ Unit & Integration Tests"
        echo "‚úÖ API Contract Validation"
        echo "‚úÖ Docker Build & Validation"