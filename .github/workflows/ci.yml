name: Data Engine CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: "3.13"
  POETRY_VERSION: "1.7.1"

jobs:
  # ============================================================================
  # LINTING & CODE QUALITY
  # ============================================================================
  lint:
    name: 🔍 Linting & Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 📦 Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        echo "$HOME/.local/bin" >> $GITHUB_PATH
        poetry config virtualenvs.create true
        poetry config virtualenvs.in-project true

    - name: 📥 Install dependencies
      run: poetry install --with dev,test

    - name: 🔍 Lint and format check (Ruff)
      run: |
        poetry run ruff check src/ tests/
        poetry run ruff format --check src/ tests/

    - name: 🔍 Type checking (MyPy)
      run: |
        poetry run mypy src/ --ignore-missing-imports --no-strict-optional

  # ============================================================================
  # UNIT TESTS
  # ============================================================================
  unit-tests:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 📦 Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        echo "$HOME/.local/bin" >> $GITHUB_PATH
        poetry config virtualenvs.create true
        poetry config virtualenvs.in-project true

    - name: 📥 Install dependencies
      run: poetry install --with dev,test

    - name: 🧪 Run unit tests
      run: |
        poetry run pytest tests/unit/ -v --cov=src --cov-report=xml --cov-report=html
      env:
        DATABASE_URL: "sqlite:///./test.db"
        GITHUB_ACCESS_TOKEN: "test_token"
        MISTRAL_API_KEY: "test_key"

    - name: 📊 Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # ============================================================================
  # INTEGRATION TESTS
  # ============================================================================
  integration-tests:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 📦 Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        echo "$HOME/.local/bin" >> $GITHUB_PATH
        poetry config virtualenvs.create true
        poetry config virtualenvs.in-project true

    - name: 📥 Install dependencies
      run: poetry install --with dev,test

    - name: 🔧 Set up test environment
      run: |
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_db" >> $GITHUB_ENV
        echo "CELERY_BROKER_URL=redis://localhost:6379/0" >> $GITHUB_ENV
        echo "CELERY_RESULT_BACKEND=redis://localhost:6379/0" >> $GITHUB_ENV
        echo "GITHUB_ACCESS_TOKEN=test_token" >> $GITHUB_ENV
        echo "MISTRAL_API_KEY=test_key" >> $GITHUB_ENV

    - name: 🧪 Run integration tests
      run: |
        poetry run pytest tests/integration/ -v --cov=src --cov-report=xml --cov-report=html
      env:
        DATABASE_URL: "postgresql://postgres:postgres@localhost:5432/test_db"
        CELERY_BROKER_URL: "redis://localhost:6379/0"
        CELERY_RESULT_BACKEND: "redis://localhost:6379/0"
        GITHUB_ACCESS_TOKEN: "test_token"
        MISTRAL_API_KEY: "test_key"

    - name: 📊 Upload integration coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: integrationtests
        name: codecov-umbrella

  # ============================================================================
  # API TESTS
  # ============================================================================
  api-tests:
    name: 🌐 API Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 📦 Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        echo "$HOME/.local/bin" >> $GITHUB_PATH
        poetry config virtualenvs.create true
        poetry config virtualenvs.in-project true

    - name: 📥 Install dependencies
      run: poetry install --with dev,test

    - name: 🧪 Run API tests
      run: |
        poetry run pytest tests/integration/test_api_recommendations.py -v
      env:
        DATABASE_URL: "sqlite:///./test_api.db"
        GITHUB_ACCESS_TOKEN: "test_token"
        MISTRAL_API_KEY: "test_key"

  # ============================================================================
  # SECURITY SCAN
  # ============================================================================
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 📦 Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        echo "$HOME/.local/bin" >> $GITHUB_PATH
        poetry config virtualenvs.create true
        poetry config virtualenvs.in-project true

    - name: 📥 Install dependencies
      run: poetry install --with dev,test

    - name: 🔒 Run security scan
      run: |
        poetry run pip install bandit safety
        poetry run bandit -r src/ -f json -o bandit-report.json || true
        poetry run safety check --json --output safety-report.json || true

    - name: 📊 Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  # ============================================================================
  # PERFORMANCE TESTS
  # ============================================================================
  performance:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 📦 Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        echo "$HOME/.local/bin" >> $GITHUB_PATH
        poetry config virtualenvs.create true
        poetry config virtualenvs.in-project true

    - name: 📥 Install dependencies
      run: poetry install --with dev,test

    - name: ⚡ Run performance tests
      run: |
        poetry run pytest tests/performance/ -v
      env:
        DATABASE_URL: "sqlite:///./test_perf.db"
        GITHUB_ACCESS_TOKEN: "test_token"
        MISTRAL_API_KEY: "test_key"

  # ============================================================================
  # BUILD & PUSH DOCKER IMAGE
  # ============================================================================
  build:
    name: 🐳 Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: [lint, unit-tests, integration-tests, api-tests, security]
    if: github.ref == 'refs/heads/main'
    timeout-minutes: 30

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔐 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔑 Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: 🏷️ Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: your-org/data-engine
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-

    - name: 🐳 Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # ============================================================================
  # DEPLOY TO STAGING
  # ============================================================================
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    timeout-minutes: 15

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🚀 Deploy to staging environment
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment logic here
        # Example: kubectl apply -f k8s/staging/
        # Example: docker-compose -f docker-compose.staging.yml up -d

  # ============================================================================
  # DEPLOY TO PRODUCTION
  # ============================================================================
  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    timeout-minutes: 20

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🚀 Deploy to production environment
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment logic here
        # Example: kubectl apply -f k8s/production/
        # Example: docker-compose -f docker-compose.prod.yml up -d

  # ============================================================================
  # NOTIFICATIONS
  # ============================================================================
  notify:
    name: 📢 Notifications
    runs-on: ubuntu-latest
    needs: [lint, unit-tests, integration-tests, api-tests, security, performance]
    if: always()
    timeout-minutes: 5

    steps:
    - name: 📊 Generate test summary
      run: |
        echo "## Test Summary" >> $GITHUB_STEP_SUMMARY
        echo "- Linting: ${{ needs.lint.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Unit Tests: ${{ needs.unit-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Integration Tests: ${{ needs.integration-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- API Tests: ${{ needs.api-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Security: ${{ needs.security.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Performance: ${{ needs.performance.result }}" >> $GITHUB_STEP_SUMMARY

    - name: 📧 Send notification on failure
      if: failure()
      run: |
        echo "One or more tests failed. Please check the logs."